import os

from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes

from database.db import client_check, subscribe_client, client_list
from handlers import cases_handler
from handlers.services_handler import services
from utils.states import HANDLE_OPTION, ASK_NAME, SEND_TO_ALL, CONTACTME_OR_MENU
import logging

load_dotenv()
ADMIN_ID = os.getenv("ADMIN_ID")


async def welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Represents WELCOME handler
    """
    try:
        logging.info("WELCOME handler is triggered")
        keyboard = [
            [InlineKeyboardButton("–ü–æ—Å–ª—É–≥–∏", callback_data="services")],
            [InlineKeyboardButton("–ú–æ—ó –∫–µ–π—Å–∏&–≤—ñ–¥–≥—É–∫–∏", callback_data="cases")],
            [InlineKeyboardButton("–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É –∫–æ—Ä–∏—Å–Ω–∏—Ö –ø–æ—Ä–∞–¥", callback_data="subscription")],
            [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç–∏ –º–µ–Ω—ñ", callback_data="contactme")],
        ]
        if update.effective_user.id == int(ADMIN_ID):
            keyboard.append([InlineKeyboardButton("–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—Å—ñ–º", callback_data="admin")])
        markup = InlineKeyboardMarkup(keyboard)
        await update.effective_message.reply_text("–í–∏–±–µ—Ä–∏ –æ–ø—Ü—ñ—é:", reply_markup=markup)
        return HANDLE_OPTION
    except Exception as error:
        logging.info(f"Error in WELCOME handler - {error}")


async def handle_option(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Handles callback query options from the main (welcome) menu.

    Supported options:
    - "services": navigates to the services flow.
    - "cases": shows previous case examples and provides contact options.
    - "subscription": checks subscription status and subscribes if needed.
    - "contactme": sends contact info with reply markup.
    - "admin": allows admin to send a broadcast message to all subscribers.

    Args:
        update (telegram.Update): Incoming update from the user.
        context (telegram.ext.CallbackContext): Context containing user data and bot instance.

    Returns:
        int: The next conversation state (e.g. CONTACTME_OR_MENU, ASK_NAME, SEND_TO_ALL), or None.
    """
    try:
        logging.info("HANDLE OPTION in WELCOME handler is triggered")
        query = update.callback_query
        option = query.data
        if option == "services":
            return await services(update, context)
        elif option == "cases":
            await cases_handler.show_cases(update, context)
            keyboard = [
                [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç–∏ –º–µ–Ω—ñ", callback_data="contact_me")],
                [InlineKeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
            markup = InlineKeyboardMarkup(keyboard)
            await context.bot.send_message(chat_id=update.effective_chat.id,
                                           text="‚ùï–ë–∞–∂–∞—î—Ç–µ, —â–æ–± –ø—Ä–æ –≤–∞—Å –¥—ñ–∑–Ω–∞–ª–∏—Å—åü§©, —Ç–∞ –∑–∞–ª—É—á–∏—Ç–∏ –±—ñ–ª—å—à–µ –∫–ª—ñ—î–Ω—Ç—ñ–≤, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å —É direct üíå")
            await update.effective_message.reply_text("–í–∏–±–µ—Ä–∏ –æ–ø—Ü—ñ—é:", reply_markup=markup)
            return CONTACTME_OR_MENU
        elif option == "subscription":
            client_details = await client_check(update.effective_user.id)
            if client_details:
                if client_details[3] == "no":
                    await subscribe_client(update.effective_user.id)
                    await context.bot.send_message(chat_id=query.message.chat.id,
                                                   text="–í—ñ—Ç–∞—éü§©! –¢–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è(–ª–∞—Å—å) –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É –∫–æ—Ä–∏—Å–Ω–∏—Ö –ø–æ—Ä–∞–¥ –≤—ñ–¥ –º–µ–Ω–µ.")
                    keyboard = [
                        [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç–∏ –º–µ–Ω—ñ", callback_data="contact_me")],
                        [InlineKeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                    ]
                    markup = InlineKeyboardMarkup(keyboard)
                    await update.effective_message.reply_text("–í–∏–±–µ—Ä–∏ –æ–ø—Ü—ñ—é:", reply_markup=markup)
                    return CONTACTME_OR_MENU
                else:
                    await context.bot.send_message(chat_id=query.message.chat.id,
                                                   text="–¢–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π(–∞) –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É –∫–æ—Ä–∏—Å–Ω–∏—Ö –ø–æ—Ä–∞–¥ –≤—ñ–¥ –º–µ–Ω–µ. –û—á—ñ–∫—É–π –Ω–∞ –ø–æ—Ä–∞–¥–∏ü§ì")
                    keyboard = [
                        [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç–∏ –º–µ–Ω—ñ", callback_data="contact_me")],
                        [InlineKeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                    ]
                    markup = InlineKeyboardMarkup(keyboard)
                    await update.effective_message.reply_text("–í–∏–±–µ—Ä–∏ –æ–ø—Ü—ñ—é:", reply_markup=markup)
                    return CONTACTME_OR_MENU
            else:
                context.user_data["client_id"] = update.effective_user.id
                await context.bot.send_message(chat_id=query.message.chat.id,
                                               text="–£–ø—Åüò¶, –∑–¥–∞—î—Ç—å—Å—è –º–∏ —â–µ –Ω–µ –∑–Ω–∞–π–æ–º—ñ. –ê–ª–µ –Ω–µ —Ö–≤–∏–ª—é–π—Å—è —Ü–µ –∑–∞–π–º–µ –æ–¥–Ω—É –º–∏—Ç—åüòâ "
                                                    "\n–í–∫–∞–∂–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —Ç–≤–æ—î —ñ–º'—è:")
                return ASK_NAME
        elif option == "contactme":
            await context.bot.send_message(chat_id=query.from_user.id,
                                           text="–Ø –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é —â–æ–¥–Ω—è –∑ 10:00 –¥–æ 19:00 üí¨: https://t.me/smar1owl")
            keyboard = [
                [InlineKeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
            markup = InlineKeyboardMarkup(keyboard)
            await update.effective_message.reply_text("üëÜ", reply_markup=markup)
            return CONTACTME_OR_MENU
        elif option == "admin":
            await context.bot.send_message(chat_id=query.message.chat.id,
                                           text="–í–≤–µ–¥–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å—ñ–º –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–º –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É –ø–æ—Ä–∞–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º:")
            return SEND_TO_ALL

    except Exception as error:
        logging.error(f"Error in HANDLE OPTION in WELCOME handler - {error}")


async def send_to_all(update, context):
    """
    Sends a broadcast message to all subscribers
    """
    try:
        logging.info("SEND_TO_ALL function in WELCOME handler is triggered")
        c_list = await client_list()
        for c_id in c_list:
            await context.bot.send_message(chat_id=c_id[0],
                                           text=update.message.text)
    except Exception as error:
        logging.error(f"Error in HANDLE SEND_TO_ALL in WELCOME handler - {error}")
