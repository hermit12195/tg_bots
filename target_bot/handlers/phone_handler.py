from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, \
    ReplyKeyboardRemove
from telegram.ext import ContextTypes

from database.db import create_client, subscribe_client
from utils.states import ASK_SOCIAL_NETWORK, ASK_PHONE, CONTACTME_OR_MENU
import logging


async def request_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Represents PHONE handler
    """
    try:
        logging.info("PHONE handler is triggered")
        phone_button = KeyboardButton("üì±–ü–æ–¥—ñ–ª–∏—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)
        keyboard = [[phone_button]]
        markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(
            f"–î—è–∫—É—é, {context.user_data['client_name']}üòä! –¢–µ–ø–µ—Ä —á–µ–∫–∞—é –Ω–∞ —Ç–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
            reply_markup=markup)
        return ASK_PHONE
    except Exception as error:
        logging.error(f"Error in PHONE handler - {error}")


async def collect_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Handles phone number collection from the user.

    - If the phone number is received via contact sharing, saves it in user_data.
    - Depending on the flow:
        - Continues to ask for social media (if service_type exists).
        - Or confirms subscription and registers the client.
    - If no contact is received, prompts the user again with a contact sharing button.

    Args:
        update (telegram.Update): The incoming update from the user.
        context (telegram.ext.CallbackContext): Context containing user data.

    Returns:
        int: The next state in the conversation (ASK_SOCIAL_NETWORK, CONTACTME_OR_MENU, or ASK_PHONE).
    """
    try:
        logging.info("COLLECT_PHONE function in PHONE handler is triggered")
        if update.message.contact is not None:
            client_phone = update.message.contact.phone_number
            context.user_data["client_phone"] = client_phone
            if "service_type" in context.user_data:
                await update.message.reply_text(
                    "–ó–∞–Ω–æ—Ç—É–≤–∞–ª–∞‚úçüèª! \n–ù–∞–¥—ñ—à–ª–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–≤—ñ–π –∞–∫–∫–∞—É–Ω—Ç –≤ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ:",
                    reply_markup=ReplyKeyboardRemove())
                return ASK_SOCIAL_NETWORK
            else:
                await update.message.reply_text(
                    "–í—ñ—Ç–∞—éü§©! –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–æ—Ä–∏—Å–Ω—ñ –ø–æ—Ä–∞–¥–∏ –≤—ñ–¥ –º–µ–Ω–µ —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞.")
                await create_client(context.user_data["client_id"], context.user_data["client_name"],
                                    context.user_data["client_phone"])
                await subscribe_client(update.effective_user.id)
                keyboard = [
                    [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç–∏ –º–µ–Ω—ñ", callback_data="contact_me")],
                    [InlineKeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                ]
                markup = InlineKeyboardMarkup(keyboard)
                await update.effective_message.reply_text("–í–∏–±–µ—Ä–∏ –æ–ø—Ü—ñ—é:", reply_markup=markup)
                return CONTACTME_OR_MENU
        else:
            phone_button = KeyboardButton("üì±–ü–æ–¥—ñ–ª–∏—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)
            keyboard = [[phone_button]]
            markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text(
                "–•–º–º–º–º, –∑–¥–∞—î—Ç—å—Å—è —Ç–∏ –Ω–∞–∂–∞–≤(–ª–∞) –∫–Ω–æ–ø–∫—É '–ü–æ–¥—ñ–ª–∏—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É', –¥–∞–≤–∞–π —Å–ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑",
                reply_markup=markup)
            return ASK_PHONE
    except Exception as error:
        logging.error(f"Error in COLLECT_PHONE function in PHONE handler - {error}")
