from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import logging

from database.db import client_check
from utils.states import SERVICES, ASK_NAME, ASK_SOCIAL_NETWORK


async def services(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Represents SERVICES handler
    """
    try:
        logging.info("SERVICES handler is triggered")
        keyboard = [
            [InlineKeyboardButton("–†–µ–∫–ª–∞–º–∞ –ø—ñ–¥ –∫–ª—é—á", callback_data="ads")],
            [InlineKeyboardButton("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è", callback_data="consultation")],
            [InlineKeyboardButton("–ê—É–¥–∏—Ç —Ä–µ–∫–ª–∞–º–∏", callback_data="audit")],
            [InlineKeyboardButton("–ù–∞–≤—á–∞–Ω–Ω—è", callback_data="education")],
        ]
        markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.message.reply_text("–ù–∞—Ä–∞–∑—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –Ω–∞—Å—Ç—É–ø–Ω—ñ –ø–æ—Å–ª—É–≥–∏:", reply_markup=markup)
        return SERVICES
    except Exception as error:
        logging.info(f"Error in SERVICES handler - {error}")


async def service_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Handles user's selection of service type.

    - Saves the selected service type and client ID to user_data.
    - Checks if the client is already signed up in the database.
    - If found, proceeds to ask for the social media link.
    - If not found, asks for the client's name to begin registration.

    Args:
        update (telegram.Update): The incoming callback query update.
        context (telegram.ext.CallbackContext): Context with user data.

    Returns:
        int: The next conversation state (ASK_SOCIAL_NETWORK or ASK_NAME).
    """
    try:
        logging.info("SERVICE OPTION in SERVICES handler is triggered")

        query = update.callback_query
        option = query.data
        client_id = update.effective_user.id
        context.user_data["service_type"] = option
        context.user_data["client_id"] = client_id
        client_details = await client_check(client_id)
        if client_details:
            context.user_data["signed_up"] = "yes"
            context.user_data["client_id"] = client_details[0]
            context.user_data["client_name"] = client_details[1]
            await context.bot.send_message(chat_id=query.message.chat.id,
                                           text=f"–í—ñ—Ç–∞—é, {context.user_data['client_name']}üòä!"
                                                "\n–ù–∞–¥—ñ—à–ª–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–≤—ñ–π –∞–∫–∫–∞—É–Ω—Ç –≤ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ:")
            return ASK_SOCIAL_NETWORK
        else:
            await context.bot.send_message(chat_id=query.message.chat.id,
                                           text="–£–ø—Åüò¶, –∑–¥–∞—î—Ç—å—Å—è –º–∏ —â–µ –Ω–µ –∑–Ω–∞–π–æ–º—ñ. –ê–ª–µ –Ω–µ —Ö–≤–∏–ª—é–π—Å—è —Ü–µ –∑–∞–π–º–µ –æ–¥–Ω—É –º–∏—Ç—åüòâ "
                                                "\n–í–∫–∞–∂–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —Ç–≤–æ—î —ñ–º'—è:")
            return ASK_NAME

    except Exception as error:
        logging.error(f"Error in SERVICE_OPTIONS handler in SERVICES handler - {error}")
